### YamlMime:ManagedReference
items:
- uid: Sin.Net.Persistence.IO.Json.JsonIO
  commentId: T:Sin.Net.Persistence.IO.Json.JsonIO
  id: JsonIO
  parent: Sin.Net.Persistence.IO.Json
  children:
  - Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver
  - Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  - Sin.Net.Persistence.IO.Json.JsonIO.ReadJson(System.String)
  - Sin.Net.Persistence.IO.Json.JsonIO.ReadJson``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  - Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson(System.Object,System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  - Sin.Net.Persistence.IO.Json.JsonIO.Throw
  - Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString(System.Object,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  langs:
  - csharp
  - vb
  name: JsonIO
  nameWithType: JsonIO
  fullName: Sin.Net.Persistence.IO.Json.JsonIO
  type: Class
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: JsonIO
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 13
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  summary: "\nStatic class to convert between objects and json-strings. \n"
  example: []
  syntax:
    content: public static class JsonIO
    content.vb: Public Module JsonIO
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString(System.Object,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  commentId: M:Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString(System.Object,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  id: ToJsonString(System.Object,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  parent: Sin.Net.Persistence.IO.Json.JsonIO
  langs:
  - csharp
  - vb
  name: ToJsonString(Object, ISerializationBinder, List<JsonConverter>)
  nameWithType: JsonIO.ToJsonString(Object, ISerializationBinder, List<JsonConverter>)
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString(System.Object, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: ToJsonString
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 25
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  syntax:
    content: public static string ToJsonString(object obj, ISerializationBinder binder = null, List<JsonConverter> converters = null)
    parameters:
    - id: obj
      type: System.Object
    - id: binder
      type: Newtonsoft.Json.Serialization.ISerializationBinder
    - id: converters
      type: System.Collections.Generic.List{Newtonsoft.Json.JsonConverter}
    return:
      type: System.String
    content.vb: Public Shared Function ToJsonString(obj As Object, binder As ISerializationBinder = Nothing, converters As List(Of JsonConverter) = Nothing) As String
  overload: Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString*
  nameWithType.vb: JsonIO.ToJsonString(Object, ISerializationBinder, List(Of JsonConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString(System.Object, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List(Of Newtonsoft.Json.JsonConverter))
  name.vb: ToJsonString(Object, ISerializationBinder, List(Of JsonConverter))
- uid: Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  commentId: M:Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  id: FromJsonString``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  parent: Sin.Net.Persistence.IO.Json.JsonIO
  langs:
  - csharp
  - vb
  name: FromJsonString<T>(String, ISerializationBinder, List<JsonConverter>)
  nameWithType: JsonIO.FromJsonString<T>(String, ISerializationBinder, List<JsonConverter>)
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString<T>(System.String, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: FromJsonString
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 62
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  summary: "\nConverts a json-stringinto an objekt of type T\n"
  example: []
  syntax:
    content: public static T FromJsonString<T>(string json, ISerializationBinder binder = null, List<JsonConverter> converters = null)
    parameters:
    - id: json
      type: System.String
      description: The json-string
    - id: binder
      type: Newtonsoft.Json.Serialization.ISerializationBinder
      description: The optional binder implementation
    - id: converters
      type: System.Collections.Generic.List{Newtonsoft.Json.JsonConverter}
      description: The optional list of json converters.
    typeParameters:
    - id: T
      description: The typeparam
    return:
      type: '{T}'
      description: The deserialized object of type t
    content.vb: Public Shared Function FromJsonString(Of T)(json As String, binder As ISerializationBinder = Nothing, converters As List(Of JsonConverter) = Nothing) As T
  overload: Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString*
  nameWithType.vb: JsonIO.FromJsonString(Of T)(String, ISerializationBinder, List(Of JsonConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString(Of T)(System.String, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List(Of Newtonsoft.Json.JsonConverter))
  name.vb: FromJsonString(Of T)(String, ISerializationBinder, List(Of JsonConverter))
- uid: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson(System.String)
  commentId: M:Sin.Net.Persistence.IO.Json.JsonIO.ReadJson(System.String)
  id: ReadJson(System.String)
  parent: Sin.Net.Persistence.IO.Json.JsonIO
  langs:
  - csharp
  - vb
  name: ReadJson(String)
  nameWithType: JsonIO.ReadJson(String)
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson(System.String)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: ReadJson
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 92
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  summary: "\nReads a json file and returns the complete json-string.\n"
  example: []
  syntax:
    content: public static string ReadJson(string file)
    parameters:
    - id: file
      type: System.String
      description: The complete file path.
    return:
      type: System.String
      description: The deserialized object of type t.
    content.vb: Public Shared Function ReadJson(file As String) As String
  overload: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  commentId: M:Sin.Net.Persistence.IO.Json.JsonIO.ReadJson``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  id: ReadJson``1(System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  parent: Sin.Net.Persistence.IO.Json.JsonIO
  langs:
  - csharp
  - vb
  name: ReadJson<T>(String, ISerializationBinder, List<JsonConverter>)
  nameWithType: JsonIO.ReadJson<T>(String, ISerializationBinder, List<JsonConverter>)
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson<T>(System.String, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: ReadJson
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 111
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  summary: "\nReads a json file and returns the converted object.\n"
  example: []
  syntax:
    content: public static T ReadJson<T>(string file, ISerializationBinder binder = null, List<JsonConverter> converters = null)
    parameters:
    - id: file
      type: System.String
      description: The complete file path.
    - id: binder
      type: Newtonsoft.Json.Serialization.ISerializationBinder
      description: The optional binder implementation.
    - id: converters
      type: System.Collections.Generic.List{Newtonsoft.Json.JsonConverter}
      description: The optional list of json converters.
    typeParameters:
    - id: T
      description: The typeparam
    return:
      type: '{T}'
      description: The deserialized object of type t.
    content.vb: Public Shared Function ReadJson(Of T)(file As String, binder As ISerializationBinder = Nothing, converters As List(Of JsonConverter) = Nothing) As T
  overload: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson*
  nameWithType.vb: JsonIO.ReadJson(Of T)(String, ISerializationBinder, List(Of JsonConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson(Of T)(System.String, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List(Of Newtonsoft.Json.JsonConverter))
  name.vb: ReadJson(Of T)(String, ISerializationBinder, List(Of JsonConverter))
- uid: Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson(System.Object,System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  commentId: M:Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson(System.Object,System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  id: SaveToJson(System.Object,System.String,Newtonsoft.Json.Serialization.ISerializationBinder,System.Collections.Generic.List{Newtonsoft.Json.JsonConverter})
  parent: Sin.Net.Persistence.IO.Json.JsonIO
  langs:
  - csharp
  - vb
  name: SaveToJson(Object, String, ISerializationBinder, List<JsonConverter>)
  nameWithType: JsonIO.SaveToJson(Object, String, ISerializationBinder, List<JsonConverter>)
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson(System.Object, System.String, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: SaveToJson
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 131
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  summary: "\nWrites an serialized object into a file.\n"
  example: []
  syntax:
    content: public static bool SaveToJson(object obj, string file, ISerializationBinder binder = null, List<JsonConverter> converters = null)
    parameters:
    - id: obj
      type: System.Object
      description: The object to be serialized.
    - id: file
      type: System.String
      description: The complete file path.
    - id: binder
      type: Newtonsoft.Json.Serialization.ISerializationBinder
      description: The optional binder implementation.
    - id: converters
      type: System.Collections.Generic.List{Newtonsoft.Json.JsonConverter}
      description: The optional list of json converters.
    return:
      type: System.Boolean
      description: If successful it returns &apos;true&apos; otherwise &apos;false&apos;.
    content.vb: Public Shared Function SaveToJson(obj As Object, file As String, binder As ISerializationBinder = Nothing, converters As List(Of JsonConverter) = Nothing) As Boolean
  overload: Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson*
  nameWithType.vb: JsonIO.SaveToJson(Object, String, ISerializationBinder, List(Of JsonConverter))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson(System.Object, System.String, Newtonsoft.Json.Serialization.ISerializationBinder, System.Collections.Generic.List(Of Newtonsoft.Json.JsonConverter))
  name.vb: SaveToJson(Object, String, ISerializationBinder, List(Of JsonConverter))
- uid: Sin.Net.Persistence.IO.Json.JsonIO.Throw
  commentId: P:Sin.Net.Persistence.IO.Json.JsonIO.Throw
  id: Throw
  parent: Sin.Net.Persistence.IO.Json.JsonIO
  langs:
  - csharp
  - vb
  name: Throw
  nameWithType: JsonIO.Throw
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.Throw
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Throw
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 160
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  summary: "\nGets or sets the behavoir, when an internal Exception occures.\n"
  example: []
  syntax:
    content: public static bool Throw { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property Throw As Boolean
  overload: Sin.Net.Persistence.IO.Json.JsonIO.Throw*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver
  commentId: P:Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver
  id: EnableCaseResolver
  parent: Sin.Net.Persistence.IO.Json.JsonIO
  langs:
  - csharp
  - vb
  name: EnableCaseResolver
  nameWithType: JsonIO.EnableCaseResolver
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/IO/Json/JsonIO.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: EnableCaseResolver
    path: ../Sin.Net.Persistence/IO/Json/JsonIO.cs
    startLine: 165
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.IO.Json
  summary: "\nGets or sets the feature of resolving property names to lower case at serializing. \n"
  example: []
  syntax:
    content: public static bool EnableCaseResolver { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property EnableCaseResolver As Boolean
  overload: Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sin.Net.Persistence.IO.Json
  commentId: N:Sin.Net.Persistence.IO.Json
  name: Sin.Net.Persistence.IO.Json
  nameWithType: Sin.Net.Persistence.IO.Json
  fullName: Sin.Net.Persistence.IO.Json
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString*
  commentId: Overload:Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString
  name: ToJsonString
  nameWithType: JsonIO.ToJsonString
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.ToJsonString
- uid: Newtonsoft.Json.Serialization.ISerializationBinder
  commentId: T:Newtonsoft.Json.Serialization.ISerializationBinder
  parent: Newtonsoft.Json.Serialization
  isExternal: true
  name: ISerializationBinder
  nameWithType: ISerializationBinder
  fullName: Newtonsoft.Json.Serialization.ISerializationBinder
- uid: System.Collections.Generic.List{Newtonsoft.Json.JsonConverter}
  commentId: T:System.Collections.Generic.List{Newtonsoft.Json.JsonConverter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<JsonConverter>
  nameWithType: List<JsonConverter>
  fullName: System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
  nameWithType.vb: List(Of JsonConverter)
  fullName.vb: System.Collections.Generic.List(Of Newtonsoft.Json.JsonConverter)
  name.vb: List(Of JsonConverter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Newtonsoft.Json.JsonConverter
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: Newtonsoft.Json.JsonConverter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Newtonsoft.Json.JsonConverter
    name: JsonConverter
    nameWithType: JsonConverter
    fullName: Newtonsoft.Json.JsonConverter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Newtonsoft.Json.Serialization
  commentId: N:Newtonsoft.Json.Serialization
  isExternal: true
  name: Newtonsoft.Json.Serialization
  nameWithType: Newtonsoft.Json.Serialization
  fullName: Newtonsoft.Json.Serialization
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString*
  commentId: Overload:Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString
  name: FromJsonString
  nameWithType: JsonIO.FromJsonString
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.FromJsonString
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson*
  commentId: Overload:Sin.Net.Persistence.IO.Json.JsonIO.ReadJson
  name: ReadJson
  nameWithType: JsonIO.ReadJson
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.ReadJson
- uid: Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson*
  commentId: Overload:Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson
  name: SaveToJson
  nameWithType: JsonIO.SaveToJson
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.SaveToJson
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sin.Net.Persistence.IO.Json.JsonIO.Throw*
  commentId: Overload:Sin.Net.Persistence.IO.Json.JsonIO.Throw
  name: Throw
  nameWithType: JsonIO.Throw
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.Throw
- uid: Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver*
  commentId: Overload:Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver
  name: EnableCaseResolver
  nameWithType: JsonIO.EnableCaseResolver
  fullName: Sin.Net.Persistence.IO.Json.JsonIO.EnableCaseResolver
