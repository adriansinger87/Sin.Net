### YamlMime:ManagedReference
items:
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  commentId: T:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  id: MqttReceivedEventArgs
  parent: Sin.Net.Domain.Infrastructure.Mqtt
  children:
  - Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.#ctor(System.String,System.String)
  - Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize``1(Sin.Net.Domain.Persistence.Adapter.AdapterBase)
  - Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize``1(System.Func{System.String,``0})
  - Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message
  - Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic
  langs:
  - csharp
  - vb
  name: MqttReceivedEventArgs
  nameWithType: MqttReceivedEventArgs
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  type: Class
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: MqttReceivedEventArgs
    path: ../Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
    startLine: 7
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Infrastructure.Mqtt
  syntax:
    content: 'public class MqttReceivedEventArgs : EventArgs'
    content.vb: >-
      Public Class MqttReceivedEventArgs

          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
  - System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  - System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.#ctor(System.String,System.String)
  commentId: M:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  langs:
  - csharp
  - vb
  name: MqttReceivedEventArgs(String, String)
  nameWithType: MqttReceivedEventArgs.MqttReceivedEventArgs(String, String)
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.MqttReceivedEventArgs(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: .ctor
    path: ../Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
    startLine: 12
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Infrastructure.Mqtt
  syntax:
    content: public MqttReceivedEventArgs(string topic, string message)
    parameters:
    - id: topic
      type: System.String
    - id: message
      type: System.String
    content.vb: Public Sub New(topic As String, message As String)
  overload: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize``1(System.Func{System.String,``0})
  commentId: M:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize``1(System.Func{System.String,``0})
  id: Deserialize``1(System.Func{System.String,``0})
  parent: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Deserialize<T>(Func<String, T>)
  nameWithType: MqttReceivedEventArgs.Deserialize<T>(Func<String, T>)
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize<T>(System.Func<System.String, T>)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Deserialize
    path: ../Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
    startLine: 18
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Infrastructure.Mqtt
  syntax:
    content: >-
      public T Deserialize<T>(Func<string, T> function)

          where T : new()
    parameters:
    - id: function
      type: System.Func{System.String,{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Deserialize(Of T As New)(function As Func(Of String, T)) As T
  overload: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize*
  nameWithType.vb: MqttReceivedEventArgs.Deserialize(Of T)(Func(Of String, T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize(Of T)(System.Func(Of System.String, T))
  name.vb: Deserialize(Of T)(Func(Of String, T))
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize``1(Sin.Net.Domain.Persistence.Adapter.AdapterBase)
  commentId: M:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize``1(Sin.Net.Domain.Persistence.Adapter.AdapterBase)
  id: Deserialize``1(Sin.Net.Domain.Persistence.Adapter.AdapterBase)
  parent: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Deserialize<T>(AdapterBase)
  nameWithType: MqttReceivedEventArgs.Deserialize<T>(AdapterBase)
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize<T>(Sin.Net.Domain.Persistence.Adapter.AdapterBase)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Deserialize
    path: ../Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
    startLine: 23
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Infrastructure.Mqtt
  syntax:
    content: >-
      public T Deserialize<T>(AdapterBase adapter)

          where T : new()
    parameters:
    - id: adapter
      type: Sin.Net.Domain.Persistence.Adapter.AdapterBase
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Deserialize(Of T As New)(adapter As AdapterBase) As T
  overload: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize*
  nameWithType.vb: MqttReceivedEventArgs.Deserialize(Of T)(AdapterBase)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize(Of T)(Sin.Net.Domain.Persistence.Adapter.AdapterBase)
  name.vb: Deserialize(Of T)(AdapterBase)
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic
  commentId: P:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic
  id: Topic
  parent: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Topic
  nameWithType: MqttReceivedEventArgs.Topic
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Topic
    path: ../Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
    startLine: 30
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Infrastructure.Mqtt
  syntax:
    content: public string Topic { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Topic As String
  overload: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message
  commentId: P:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message
  id: Message
  parent: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: MqttReceivedEventArgs.Message
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Message
    path: ../Sin.Net.Domain/Infrastructure/Mqtt/MqttMessageReceivedEventArgs.cs
    startLine: 32
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Infrastructure.Mqtt
  syntax:
    content: public string Message { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Message As String
  overload: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sin.Net.Domain.Infrastructure.Mqtt
  commentId: N:Sin.Net.Domain.Infrastructure.Mqtt
  name: Sin.Net.Domain.Infrastructure.Mqtt
  nameWithType: Sin.Net.Domain.Infrastructure.Mqtt
  fullName: Sin.Net.Domain.Infrastructure.Mqtt
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  parent: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  definition: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  name: Clone()
  nameWithType: ObjectCloneExtensions.Clone()
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone()
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  parent: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  definition: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  name: Clone<MqttReceivedEventArgs>()
  nameWithType: ObjectCloneExtensions.Clone<MqttReceivedEventArgs>()
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs>()
  nameWithType.vb: ObjectCloneExtensions.Clone(Of MqttReceivedEventArgs)()
  fullName.vb: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs)()
  name.vb: Clone(Of MqttReceivedEventArgs)()
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
    name: Clone<MqttReceivedEventArgs>
    nameWithType: ObjectCloneExtensions.Clone<MqttReceivedEventArgs>
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
    name: Clone(Of MqttReceivedEventArgs)
    nameWithType: ObjectCloneExtensions.Clone(Of MqttReceivedEventArgs)
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  parent: Sin.Net.Domain.System.Security.SecurityExtensions
  definition: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  name: SecureAccess(SecurityLevels, String)
  nameWithType: SecurityExtensions.SecureAccess(SecurityLevels, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  parent: Sin.Net.Domain.System.Security.SecurityExtensions
  definition: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  name: SecureAccess(Int32, String)
  nameWithType: SecurityExtensions.SecureAccess(Int32, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  isExternal: true
  name: Clone(Object)
  nameWithType: ObjectCloneExtensions.Clone(Object)
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  commentId: T:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  parent: Sin.Net.Domain.System.Extensions
  name: ObjectCloneExtensions
  nameWithType: ObjectCloneExtensions
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  name: Clone<T>(T)
  nameWithType: ObjectCloneExtensions.Clone<T>(T)
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<T>(T)
  nameWithType.vb: ObjectCloneExtensions.Clone(Of T)(T)
  fullName.vb: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of T)(T)
  name.vb: Clone(Of T)(T)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
    name: Clone<T>
    nameWithType: ObjectCloneExtensions.Clone<T>
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
    name: Clone(Of T)
    nameWithType: ObjectCloneExtensions.Clone(Of T)
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  isExternal: true
  name: SecureAccess(Object, SecurityLevels, String)
  nameWithType: SecurityExtensions.SecureAccess(Object, SecurityLevels, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object, Sin.Net.Domain.Enumerations.SecurityLevels, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Security.SecurityExtensions
  commentId: T:Sin.Net.Domain.System.Security.SecurityExtensions
  parent: Sin.Net.Domain.System.Security
  name: SecurityExtensions
  nameWithType: SecurityExtensions
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions
- uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  isExternal: true
  name: SecureAccess(Object, Int32, String)
  nameWithType: SecurityExtensions.SecureAccess(Object, Int32, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object, System.Int32, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Extensions
  commentId: N:Sin.Net.Domain.System.Extensions
  name: Sin.Net.Domain.System.Extensions
  nameWithType: Sin.Net.Domain.System.Extensions
  fullName: Sin.Net.Domain.System.Extensions
- uid: Sin.Net.Domain.System.Security
  commentId: N:Sin.Net.Domain.System.Security
  name: Sin.Net.Domain.System.Security
  nameWithType: Sin.Net.Domain.System.Security
  fullName: Sin.Net.Domain.System.Security
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.#ctor*
  commentId: Overload:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.#ctor
  name: MqttReceivedEventArgs
  nameWithType: MqttReceivedEventArgs.MqttReceivedEventArgs
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.MqttReceivedEventArgs
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize*
  commentId: Overload:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize
  name: Deserialize
  nameWithType: MqttReceivedEventArgs.Deserialize
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Deserialize
- uid: System.Func{System.String,{T}}
  commentId: T:System.Func{System.String,``0}
  parent: System
  definition: System.Func`2
  name: Func<String, T>
  nameWithType: Func<String, T>
  fullName: System.Func<System.String, T>
  nameWithType.vb: Func(Of String, T)
  fullName.vb: System.Func(Of System.String, T)
  name.vb: Func(Of String, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sin.Net.Domain.Persistence.Adapter.AdapterBase
  commentId: T:Sin.Net.Domain.Persistence.Adapter.AdapterBase
  parent: Sin.Net.Domain.Persistence.Adapter
  name: AdapterBase
  nameWithType: AdapterBase
  fullName: Sin.Net.Domain.Persistence.Adapter.AdapterBase
- uid: Sin.Net.Domain.Persistence.Adapter
  commentId: N:Sin.Net.Domain.Persistence.Adapter
  name: Sin.Net.Domain.Persistence.Adapter
  nameWithType: Sin.Net.Domain.Persistence.Adapter
  fullName: Sin.Net.Domain.Persistence.Adapter
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic*
  commentId: Overload:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic
  name: Topic
  nameWithType: MqttReceivedEventArgs.Topic
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Topic
- uid: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message*
  commentId: Overload:Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message
  name: Message
  nameWithType: MqttReceivedEventArgs.Message
  fullName: Sin.Net.Domain.Infrastructure.Mqtt.MqttReceivedEventArgs.Message
