### YamlMime:ManagedReference
items:
- uid: Sin.Net.Domain.Repository.RepositoryBase`1
  commentId: T:Sin.Net.Domain.Repository.RepositoryBase`1
  id: RepositoryBase`1
  parent: Sin.Net.Domain.Repository
  children:
  - Sin.Net.Domain.Repository.RepositoryBase`1.#ctor
  - Sin.Net.Domain.Repository.RepositoryBase`1.Add(`0)
  - Sin.Net.Domain.Repository.RepositoryBase`1.AddRange(`0[])
  - Sin.Net.Domain.Repository.RepositoryBase`1.Clear
  - Sin.Net.Domain.Repository.RepositoryBase`1.Contains(`0)
  - Sin.Net.Domain.Repository.RepositoryBase`1.Count
  - Sin.Net.Domain.Repository.RepositoryBase`1.Item(System.Int32)
  - Sin.Net.Domain.Repository.RepositoryBase`1.Items
  - Sin.Net.Domain.Repository.RepositoryBase`1.Name
  - Sin.Net.Domain.Repository.RepositoryBase`1.Remove(`0)
  - Sin.Net.Domain.Repository.RepositoryBase`1.RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: RepositoryBase<T>
  nameWithType: RepositoryBase<T>
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>
  type: Class
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: RepositoryBase
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 6
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  syntax:
    content: >-
      [Serializable]

      public abstract class RepositoryBase<T>
    typeParameters:
    - id: T
    content.vb: >-
      <Serializable>

      Public MustInherit Class RepositoryBase(Of T)
  inheritance:
  - System.Object
  derivedClasses:
  - Sin.Net.Domain.Repository.IterativeRepositoryBase`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - Sin.Net.Domain.Repository.RepositoryBase`1.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
  - System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  - System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: RepositoryBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T)
  name.vb: RepositoryBase(Of T)
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.#ctor
  commentId: M:Sin.Net.Domain.Repository.RepositoryBase`1.#ctor
  id: '#ctor'
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: RepositoryBase()
  nameWithType: RepositoryBase<T>.RepositoryBase()
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.RepositoryBase()
  type: Constructor
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: .ctor
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 14
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nBase constructor that instanciates the items list.\n"
  example: []
  syntax:
    content: public RepositoryBase()
    content.vb: Public Sub New
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.#ctor*
  nameWithType.vb: RepositoryBase(Of T).RepositoryBase()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).RepositoryBase()
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Contains(`0)
  commentId: M:Sin.Net.Domain.Repository.RepositoryBase`1.Contains(`0)
  id: Contains(`0)
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: RepositoryBase<T>.Contains(T)
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Contains(T)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Contains
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 26
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nTakes the searchItem and processes a search in the repository\n"
  example: []
  syntax:
    content: public virtual bool Contains(T searchItem)
    parameters:
    - id: searchItem
      type: '{T}'
      description: The item for the search
    return:
      type: System.Boolean
      description: True if it was found, false if not
    content.vb: Public Overridable Function Contains(searchItem As T) As Boolean
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Contains*
  nameWithType.vb: RepositoryBase(Of T).Contains(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Contains(T)
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Add(`0)
  commentId: M:Sin.Net.Domain.Repository.RepositoryBase`1.Add(`0)
  id: Add(`0)
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: RepositoryBase<T>.Add(T)
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Add(T)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Add
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 36
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nAdds a new item to the repository\n"
  example: []
  syntax:
    content: public virtual T Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: the new instance of T that shall be added to the list
    return:
      type: '{T}'
      description: returns the new item
    content.vb: Public Overridable Function Add(item As T) As T
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Add*
  nameWithType.vb: RepositoryBase(Of T).Add(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Add(T)
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.AddRange(`0[])
  commentId: M:Sin.Net.Domain.Repository.RepositoryBase`1.AddRange(`0[])
  id: AddRange(`0[])
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: AddRange(T[])
  nameWithType: RepositoryBase<T>.AddRange(T[])
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.AddRange(T[])
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: AddRange
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 42
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  syntax:
    content: public virtual void AddRange(T[] items)
    parameters:
    - id: items
      type: '{T}[]'
    content.vb: Public Overridable Sub AddRange(items As T())
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.AddRange*
  nameWithType.vb: RepositoryBase(Of T).AddRange(T())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).AddRange(T())
  name.vb: AddRange(T())
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.RemoveAt(System.Int32)
  commentId: M:Sin.Net.Domain.Repository.RepositoryBase`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: RepositoryBase<T>.RemoveAt(Int32)
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: RemoveAt
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 51
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nRemoves an item at a specific index\n"
  example: []
  syntax:
    content: public virtual void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: zero-based index
    content.vb: Public Overridable Sub RemoveAt(index As Integer)
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.RemoveAt*
  nameWithType.vb: RepositoryBase(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).RemoveAt(System.Int32)
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Remove(`0)
  commentId: M:Sin.Net.Domain.Repository.RepositoryBase`1.Remove(`0)
  id: Remove(`0)
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: RepositoryBase<T>.Remove(T)
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Remove(T)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Remove
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 61
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nRemoves an specific item that is stored in the repository\n"
  example: []
  syntax:
    content: public virtual bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: the instance of T that shall be removed
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overridable Function Remove(item As T) As Boolean
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Remove*
  nameWithType.vb: RepositoryBase(Of T).Remove(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Remove(T)
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Clear
  commentId: M:Sin.Net.Domain.Repository.RepositoryBase`1.Clear
  id: Clear
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: RepositoryBase<T>.Clear()
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Clear()
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Clear
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 66
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Clear*
  nameWithType.vb: RepositoryBase(Of T).Clear()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Clear()
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Name
  commentId: P:Sin.Net.Domain.Repository.RepositoryBase`1.Name
  id: Name
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RepositoryBase<T>.Name
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Name
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Name
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 76
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nGets or sets the name of the repository\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Name*
  nameWithType.vb: RepositoryBase(Of T).Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Name
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Items
  commentId: P:Sin.Net.Domain.Repository.RepositoryBase`1.Items
  id: Items
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: RepositoryBase<T>.Items
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Items
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Items
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 81
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nGets the items of the repository and allows it for derived classes to set the items list\n"
  example: []
  syntax:
    content: public List<T> Items { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Property Items As List(Of T)
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Items*
  nameWithType.vb: RepositoryBase(Of T).Items
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Items
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Count
  commentId: P:Sin.Net.Domain.Repository.RepositoryBase`1.Count
  id: Count
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: RepositoryBase<T>.Count
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Count
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Count
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 86
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nGets the count of the items list as a shortcut property \n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Count*
  nameWithType.vb: RepositoryBase(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Count
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Item(System.Int32)
  commentId: P:Sin.Net.Domain.Repository.RepositoryBase`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Sin.Net.Domain.Repository.RepositoryBase`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: RepositoryBase<T>.Item[Int32]
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Domain/Repository/RepositoryBase.cs
      branch: develop
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: this[]
    path: ../Sin.Net.Domain/Repository/RepositoryBase.cs
    startLine: 95
  assemblies:
  - Sin.Net.Domain
  namespace: Sin.Net.Domain.Repository
  summary: "\nindex-based intexer to be able to get the instance at the index i\n"
  example: []
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The index of the item in the list
    return:
      type: '{T}'
      description: The instance of T with the corresponding index
    content.vb: Public ReadOnly Property Item(index As Integer) As T
  overload: Sin.Net.Domain.Repository.RepositoryBase`1.Item*
  nameWithType.vb: RepositoryBase(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: Sin.Net.Domain.Repository
  commentId: N:Sin.Net.Domain.Repository
  name: Sin.Net.Domain.Repository
  nameWithType: Sin.Net.Domain.Repository
  fullName: Sin.Net.Domain.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  parent: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  definition: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  name: Clone()
  nameWithType: ObjectCloneExtensions.Clone()
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone()
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  parent: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  definition: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  name: Clone<RepositoryBase<T>>()
  nameWithType: ObjectCloneExtensions.Clone<RepositoryBase<T>>()
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<Sin.Net.Domain.Repository.RepositoryBase<T>>()
  nameWithType.vb: ObjectCloneExtensions.Clone(Of RepositoryBase(Of T))()
  fullName.vb: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of Sin.Net.Domain.Repository.RepositoryBase(Of T))()
  name.vb: Clone(Of RepositoryBase(Of T))()
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
    name: Clone<RepositoryBase<T>>
    nameWithType: ObjectCloneExtensions.Clone<RepositoryBase<T>>
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<Sin.Net.Domain.Repository.RepositoryBase<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
    name: Clone(Of RepositoryBase(Of T))
    nameWithType: ObjectCloneExtensions.Clone(Of RepositoryBase(Of T))
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of Sin.Net.Domain.Repository.RepositoryBase(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  parent: Sin.Net.Domain.System.Security.SecurityExtensions
  definition: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  name: SecureAccess(SecurityLevels, String)
  nameWithType: SecurityExtensions.SecureAccess(SecurityLevels, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  parent: Sin.Net.Domain.System.Security.SecurityExtensions
  definition: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  name: SecureAccess(Int32, String)
  nameWithType: SecurityExtensions.SecureAccess(Int32, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  isExternal: true
  name: Clone(Object)
  nameWithType: ObjectCloneExtensions.Clone(Object)
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  commentId: T:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  parent: Sin.Net.Domain.System.Extensions
  name: ObjectCloneExtensions
  nameWithType: ObjectCloneExtensions
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  name: Clone<T>(T)
  nameWithType: ObjectCloneExtensions.Clone<T>(T)
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<T>(T)
  nameWithType.vb: ObjectCloneExtensions.Clone(Of T)(T)
  fullName.vb: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of T)(T)
  name.vb: Clone(Of T)(T)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
    name: Clone<T>
    nameWithType: ObjectCloneExtensions.Clone<T>
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
    name: Clone(Of T)
    nameWithType: ObjectCloneExtensions.Clone(Of T)
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  isExternal: true
  name: SecureAccess(Object, SecurityLevels, String)
  nameWithType: SecurityExtensions.SecureAccess(Object, SecurityLevels, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object, Sin.Net.Domain.Enumerations.SecurityLevels, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Security.SecurityExtensions
  commentId: T:Sin.Net.Domain.System.Security.SecurityExtensions
  parent: Sin.Net.Domain.System.Security
  name: SecurityExtensions
  nameWithType: SecurityExtensions
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions
- uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  isExternal: true
  name: SecureAccess(Object, Int32, String)
  nameWithType: SecurityExtensions.SecureAccess(Object, Int32, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object, System.Int32, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Extensions
  commentId: N:Sin.Net.Domain.System.Extensions
  name: Sin.Net.Domain.System.Extensions
  nameWithType: Sin.Net.Domain.System.Extensions
  fullName: Sin.Net.Domain.System.Extensions
- uid: Sin.Net.Domain.System.Security
  commentId: N:Sin.Net.Domain.System.Security
  name: Sin.Net.Domain.System.Security
  nameWithType: Sin.Net.Domain.System.Security
  fullName: Sin.Net.Domain.System.Security
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.#ctor*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.#ctor
  name: RepositoryBase
  nameWithType: RepositoryBase<T>.RepositoryBase
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.RepositoryBase
  nameWithType.vb: RepositoryBase(Of T).RepositoryBase
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).RepositoryBase
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Contains*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Contains
  name: Contains
  nameWithType: RepositoryBase<T>.Contains
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Contains
  nameWithType.vb: RepositoryBase(Of T).Contains
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Contains
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Add*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Add
  name: Add
  nameWithType: RepositoryBase<T>.Add
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Add
  nameWithType.vb: RepositoryBase(Of T).Add
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Add
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.AddRange*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.AddRange
  name: AddRange
  nameWithType: RepositoryBase<T>.AddRange
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.AddRange
  nameWithType.vb: RepositoryBase(Of T).AddRange
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).AddRange
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.RemoveAt*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.RemoveAt
  name: RemoveAt
  nameWithType: RepositoryBase<T>.RemoveAt
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.RemoveAt
  nameWithType.vb: RepositoryBase(Of T).RemoveAt
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).RemoveAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Remove*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Remove
  name: Remove
  nameWithType: RepositoryBase<T>.Remove
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Remove
  nameWithType.vb: RepositoryBase(Of T).Remove
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Remove
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Clear*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Clear
  name: Clear
  nameWithType: RepositoryBase<T>.Clear
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Clear
  nameWithType.vb: RepositoryBase(Of T).Clear
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Clear
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Name*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Name
  name: Name
  nameWithType: RepositoryBase<T>.Name
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Name
  nameWithType.vb: RepositoryBase(Of T).Name
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Items*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Items
  name: Items
  nameWithType: RepositoryBase<T>.Items
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Items
  nameWithType.vb: RepositoryBase(Of T).Items
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Items
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Count*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Count
  name: Count
  nameWithType: RepositoryBase<T>.Count
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Count
  nameWithType.vb: RepositoryBase(Of T).Count
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Count
- uid: Sin.Net.Domain.Repository.RepositoryBase`1.Item*
  commentId: Overload:Sin.Net.Domain.Repository.RepositoryBase`1.Item
  name: Item
  nameWithType: RepositoryBase<T>.Item
  fullName: Sin.Net.Domain.Repository.RepositoryBase<T>.Item
  nameWithType.vb: RepositoryBase(Of T).Item
  fullName.vb: Sin.Net.Domain.Repository.RepositoryBase(Of T).Item
