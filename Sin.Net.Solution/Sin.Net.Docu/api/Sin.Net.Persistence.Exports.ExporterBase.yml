### YamlMime:ManagedReference
items:
- uid: Sin.Net.Persistence.Exports.ExporterBase
  commentId: T:Sin.Net.Persistence.Exports.ExporterBase
  id: ExporterBase
  parent: Sin.Net.Persistence.Exports
  children:
  - Sin.Net.Persistence.Exports.ExporterBase.#ctor
  - Sin.Net.Persistence.Exports.ExporterBase._exceptions
  - Sin.Net.Persistence.Exports.ExporterBase.Build``1(``0)
  - Sin.Net.Persistence.Exports.ExporterBase.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  - Sin.Net.Persistence.Exports.ExporterBase.Exception
  - Sin.Net.Persistence.Exports.ExporterBase.Export
  - Sin.Net.Persistence.Exports.ExporterBase.HandleException(System.Exception,System.String)
  - Sin.Net.Persistence.Exports.ExporterBase.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  - Sin.Net.Persistence.Exports.ExporterBase.Type
  langs:
  - csharp
  - vb
  name: ExporterBase
  nameWithType: ExporterBase
  fullName: Sin.Net.Persistence.Exports.ExporterBase
  type: Class
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: ExporterBase
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 12
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: 'public abstract class ExporterBase : IExportable'
    content.vb: >-
      Public MustInherit Class ExporterBase

          Implements IExportable
  inheritance:
  - System.Object
  derivedClasses:
  - Sin.Net.Persistence.Exports.BinaryExporter
  - Sin.Net.Persistence.Exports.CsvExporter
  - Sin.Net.Persistence.Exports.JsonExporter
  implements:
  - Sin.Net.Domain.Persistence.IExportable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Object.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - Sin.Net.Persistence.Exports.ExporterBase.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
  - System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  - System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Sin.Net.Persistence.Exports.ExporterBase._exceptions
  commentId: F:Sin.Net.Persistence.Exports.ExporterBase._exceptions
  id: _exceptions
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: _exceptions
  nameWithType: ExporterBase._exceptions
  fullName: Sin.Net.Persistence.Exports.ExporterBase._exceptions
  type: Field
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: _exceptions
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 14
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: protected List<Exception> _exceptions
    return:
      type: System.Collections.Generic.List{System.Exception}
    content.vb: Protected _exceptions As List(Of Exception)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sin.Net.Persistence.Exports.ExporterBase.#ctor
  commentId: M:Sin.Net.Persistence.Exports.ExporterBase.#ctor
  id: '#ctor'
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: ExporterBase()
  nameWithType: ExporterBase.ExporterBase()
  fullName: Sin.Net.Persistence.Exports.ExporterBase.ExporterBase()
  type: Constructor
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: .ctor
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 16
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: public ExporterBase()
    content.vb: Public Sub New
  overload: Sin.Net.Persistence.Exports.ExporterBase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sin.Net.Persistence.Exports.ExporterBase.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  commentId: M:Sin.Net.Persistence.Exports.ExporterBase.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  id: Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: Setup(SettingsBase)
  nameWithType: ExporterBase.Setup(SettingsBase)
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Setup
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 22
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: public abstract IExportable Setup(SettingsBase setting)
    parameters:
    - id: setting
      type: Sin.Net.Domain.Persistence.Settings.SettingsBase
    return:
      type: Sin.Net.Domain.Persistence.IExportable
    content.vb: Public MustOverride Function Setup(setting As SettingsBase) As IExportable
  overload: Sin.Net.Persistence.Exports.ExporterBase.Setup*
  implements:
  - Sin.Net.Domain.Persistence.IExportable.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sin.Net.Persistence.Exports.ExporterBase.Build``1(``0)
  commentId: M:Sin.Net.Persistence.Exports.ExporterBase.Build``1(``0)
  id: Build``1(``0)
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: Build<T>(T)
  nameWithType: ExporterBase.Build<T>(T)
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Build<T>(T)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Build
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 23
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: public abstract IExportable Build<T>(T data)
    parameters:
    - id: data
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: Sin.Net.Domain.Persistence.IExportable
    content.vb: Public MustOverride Function Build(Of T)(data As T) As IExportable
  overload: Sin.Net.Persistence.Exports.ExporterBase.Build*
  implements:
  - Sin.Net.Domain.Persistence.IExportable.Build``1({T})
  nameWithType.vb: ExporterBase.Build(Of T)(T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Sin.Net.Persistence.Exports.ExporterBase.Build(Of T)(T)
  name.vb: Build(Of T)(T)
- uid: Sin.Net.Persistence.Exports.ExporterBase.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  commentId: M:Sin.Net.Persistence.Exports.ExporterBase.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  id: Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: Build<T>(T, IAdaptable)
  nameWithType: ExporterBase.Build<T>(T, IAdaptable)
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Build<T>(T, Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Build
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 24
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: public abstract IExportable Build<T>(T data, IAdaptable adapter)
    parameters:
    - id: data
      type: '{T}'
    - id: adapter
      type: Sin.Net.Domain.Persistence.Adapter.IAdaptable
    typeParameters:
    - id: T
    return:
      type: Sin.Net.Domain.Persistence.IExportable
    content.vb: Public MustOverride Function Build(Of T)(data As T, adapter As IAdaptable) As IExportable
  overload: Sin.Net.Persistence.Exports.ExporterBase.Build*
  implements:
  - Sin.Net.Domain.Persistence.IExportable.Build``1({T},Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  nameWithType.vb: ExporterBase.Build(Of T)(T, IAdaptable)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Sin.Net.Persistence.Exports.ExporterBase.Build(Of T)(T, Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  name.vb: Build(Of T)(T, IAdaptable)
- uid: Sin.Net.Persistence.Exports.ExporterBase.Export
  commentId: M:Sin.Net.Persistence.Exports.ExporterBase.Export
  id: Export
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: Export()
  nameWithType: ExporterBase.Export()
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Export()
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Export
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 25
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: public abstract string Export()
    return:
      type: System.String
    content.vb: Public MustOverride Function Export As String
  overload: Sin.Net.Persistence.Exports.ExporterBase.Export*
  implements:
  - Sin.Net.Domain.Persistence.IExportable.Export
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sin.Net.Persistence.Exports.ExporterBase.HandleException(System.Exception,System.String)
  commentId: M:Sin.Net.Persistence.Exports.ExporterBase.HandleException(System.Exception,System.String)
  id: HandleException(System.Exception,System.String)
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: HandleException(Exception, String)
  nameWithType: ExporterBase.HandleException(Exception, String)
  fullName: Sin.Net.Persistence.Exports.ExporterBase.HandleException(System.Exception, System.String)
  type: Method
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: HandleException
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 27
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: protected void HandleException(Exception ex, string memberName = "")
    parameters:
    - id: ex
      type: System.Exception
    - id: memberName
      type: System.String
    content.vb: Protected Sub HandleException(ex As Exception, memberName As String = "")
  overload: Sin.Net.Persistence.Exports.ExporterBase.HandleException*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sin.Net.Persistence.Exports.ExporterBase.Exception
  commentId: P:Sin.Net.Persistence.Exports.ExporterBase.Exception
  id: Exception
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: ExporterBase.Exception
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Exception
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Exception
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 35
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: public PersistenceException Exception { get; }
    parameters: []
    return:
      type: Sin.Net.Domain.Exeptions.PersistenceException
    content.vb: Public ReadOnly Property Exception As PersistenceException
  overload: Sin.Net.Persistence.Exports.ExporterBase.Exception*
  implements:
  - Sin.Net.Domain.Persistence.IExportable.Exception
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sin.Net.Persistence.Exports.ExporterBase.Type
  commentId: P:Sin.Net.Persistence.Exports.ExporterBase.Type
  id: Type
  parent: Sin.Net.Persistence.Exports.ExporterBase
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ExporterBase.Type
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Type
  type: Property
  source:
    remote:
      path: Sin.Net.Solution/Sin.Net.Persistence/Exports/ExporterBase.cs
      branch: master
      repo: git@github.com:adriansinger87/Sin.Net.git
    id: Type
    path: ../Sin.Net.Persistence/Exports/ExporterBase.cs
    startLine: 52
  assemblies:
  - Sin.Net.Persistence
  namespace: Sin.Net.Persistence.Exports
  syntax:
    content: public abstract string Type { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property Type As String
  overload: Sin.Net.Persistence.Exports.ExporterBase.Type*
  implements:
  - Sin.Net.Domain.Persistence.IExportable.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: Sin.Net.Persistence.Exports
  commentId: N:Sin.Net.Persistence.Exports
  name: Sin.Net.Persistence.Exports
  nameWithType: Sin.Net.Persistence.Exports
  fullName: Sin.Net.Persistence.Exports
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sin.Net.Domain.Persistence.IExportable
  commentId: T:Sin.Net.Domain.Persistence.IExportable
  parent: Sin.Net.Domain.Persistence
  name: IExportable
  nameWithType: IExportable
  fullName: Sin.Net.Domain.Persistence.IExportable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  parent: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  definition: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  name: Clone()
  nameWithType: ObjectCloneExtensions.Clone()
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone()
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Persistence.Exports.ExporterBase.Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  parent: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  definition: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  name: Clone<ExporterBase>()
  nameWithType: ObjectCloneExtensions.Clone<ExporterBase>()
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<Sin.Net.Persistence.Exports.ExporterBase>()
  nameWithType.vb: ObjectCloneExtensions.Clone(Of ExporterBase)()
  fullName.vb: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of Sin.Net.Persistence.Exports.ExporterBase)()
  name.vb: Clone(Of ExporterBase)()
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
    name: Clone<ExporterBase>
    nameWithType: ObjectCloneExtensions.Clone<ExporterBase>
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<Sin.Net.Persistence.Exports.ExporterBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1
    name: Clone(Of ExporterBase)
    nameWithType: ObjectCloneExtensions.Clone(Of ExporterBase)
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of Sin.Net.Persistence.Exports.ExporterBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  parent: Sin.Net.Domain.System.Security.SecurityExtensions
  definition: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  name: SecureAccess(SecurityLevels, String)
  nameWithType: SecurityExtensions.SecureAccess(SecurityLevels, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  parent: Sin.Net.Domain.System.Security.SecurityExtensions
  definition: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  name: SecureAccess(Int32, String)
  nameWithType: SecurityExtensions.SecureAccess(Int32, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sin.Net.Domain.Persistence
  commentId: N:Sin.Net.Domain.Persistence
  name: Sin.Net.Domain.Persistence
  nameWithType: Sin.Net.Domain.Persistence
  fullName: Sin.Net.Domain.Persistence
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  isExternal: true
  name: Clone(Object)
  nameWithType: ObjectCloneExtensions.Clone(Object)
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(System.Object)
    name: Clone
    nameWithType: ObjectCloneExtensions.Clone
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  commentId: T:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
  parent: Sin.Net.Domain.System.Extensions
  name: ObjectCloneExtensions
  nameWithType: ObjectCloneExtensions
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions
- uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  commentId: M:Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
  name: Clone<T>(T)
  nameWithType: ObjectCloneExtensions.Clone<T>(T)
  fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<T>(T)
  nameWithType.vb: ObjectCloneExtensions.Clone(Of T)(T)
  fullName.vb: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of T)(T)
  name.vb: Clone(Of T)(T)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
    name: Clone<T>
    nameWithType: ObjectCloneExtensions.Clone<T>
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone``1(``0)
    name: Clone(Of T)
    nameWithType: ObjectCloneExtensions.Clone(Of T)
    fullName: Sin.Net.Domain.System.Extensions.ObjectCloneExtensions.Clone(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
  isExternal: true
  name: SecureAccess(Object, SecurityLevels, String)
  nameWithType: SecurityExtensions.SecureAccess(Object, SecurityLevels, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object, Sin.Net.Domain.Enumerations.SecurityLevels, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,Sin.Net.Domain.Enumerations.SecurityLevels,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Enumerations.SecurityLevels
    name: SecurityLevels
    nameWithType: SecurityLevels
    fullName: Sin.Net.Domain.Enumerations.SecurityLevels
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Security.SecurityExtensions
  commentId: T:Sin.Net.Domain.System.Security.SecurityExtensions
  parent: Sin.Net.Domain.System.Security
  name: SecurityExtensions
  nameWithType: SecurityExtensions
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions
- uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  commentId: M:Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
  isExternal: true
  name: SecureAccess(Object, Int32, String)
  nameWithType: SecurityExtensions.SecureAccess(Object, Int32, String)
  fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object, System.Int32, System.String)
  spec.csharp:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess(System.Object,System.Int32,System.String)
    name: SecureAccess
    nameWithType: SecurityExtensions.SecureAccess
    fullName: Sin.Net.Domain.System.Security.SecurityExtensions.SecureAccess
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.System.Extensions
  commentId: N:Sin.Net.Domain.System.Extensions
  name: Sin.Net.Domain.System.Extensions
  nameWithType: Sin.Net.Domain.System.Extensions
  fullName: Sin.Net.Domain.System.Extensions
- uid: Sin.Net.Domain.System.Security
  commentId: N:Sin.Net.Domain.System.Security
  name: Sin.Net.Domain.System.Security
  nameWithType: Sin.Net.Domain.System.Security
  fullName: Sin.Net.Domain.System.Security
- uid: System.Collections.Generic.List{System.Exception}
  commentId: T:System.Collections.Generic.List{System.Exception}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Exception>
  nameWithType: List<Exception>
  fullName: System.Collections.Generic.List<System.Exception>
  nameWithType.vb: List(Of Exception)
  fullName.vb: System.Collections.Generic.List(Of System.Exception)
  name.vb: List(Of Exception)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sin.Net.Persistence.Exports.ExporterBase.#ctor*
  commentId: Overload:Sin.Net.Persistence.Exports.ExporterBase.#ctor
  name: ExporterBase
  nameWithType: ExporterBase.ExporterBase
  fullName: Sin.Net.Persistence.Exports.ExporterBase.ExporterBase
- uid: Sin.Net.Persistence.Exports.ExporterBase.Setup*
  commentId: Overload:Sin.Net.Persistence.Exports.ExporterBase.Setup
  name: Setup
  nameWithType: ExporterBase.Setup
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Setup
- uid: Sin.Net.Domain.Persistence.IExportable.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  commentId: M:Sin.Net.Domain.Persistence.IExportable.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  parent: Sin.Net.Domain.Persistence.IExportable
  name: Setup(SettingsBase)
  nameWithType: IExportable.Setup(SettingsBase)
  fullName: Sin.Net.Domain.Persistence.IExportable.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
  spec.csharp:
  - uid: Sin.Net.Domain.Persistence.IExportable.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
    name: Setup
    nameWithType: IExportable.Setup
    fullName: Sin.Net.Domain.Persistence.IExportable.Setup
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Persistence.Settings.SettingsBase
    name: SettingsBase
    nameWithType: SettingsBase
    fullName: Sin.Net.Domain.Persistence.Settings.SettingsBase
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.Persistence.IExportable.Setup(Sin.Net.Domain.Persistence.Settings.SettingsBase)
    name: Setup
    nameWithType: IExportable.Setup
    fullName: Sin.Net.Domain.Persistence.IExportable.Setup
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sin.Net.Domain.Persistence.Settings.SettingsBase
    name: SettingsBase
    nameWithType: SettingsBase
    fullName: Sin.Net.Domain.Persistence.Settings.SettingsBase
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.Persistence.Settings.SettingsBase
  commentId: T:Sin.Net.Domain.Persistence.Settings.SettingsBase
  parent: Sin.Net.Domain.Persistence.Settings
  name: SettingsBase
  nameWithType: SettingsBase
  fullName: Sin.Net.Domain.Persistence.Settings.SettingsBase
- uid: Sin.Net.Domain.Persistence.Settings
  commentId: N:Sin.Net.Domain.Persistence.Settings
  name: Sin.Net.Domain.Persistence.Settings
  nameWithType: Sin.Net.Domain.Persistence.Settings
  fullName: Sin.Net.Domain.Persistence.Settings
- uid: Sin.Net.Persistence.Exports.ExporterBase.Build*
  commentId: Overload:Sin.Net.Persistence.Exports.ExporterBase.Build
  name: Build
  nameWithType: ExporterBase.Build
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Build
- uid: Sin.Net.Domain.Persistence.IExportable.Build``1({T})
  commentId: M:Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
  parent: Sin.Net.Domain.Persistence.IExportable
  definition: Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
  name: Build<T>(T)
  nameWithType: IExportable.Build<T>(T)
  fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>(T)
  nameWithType.vb: IExportable.Build(Of T)(T)
  fullName.vb: Sin.Net.Domain.Persistence.IExportable.Build(Of T)(T)
  name.vb: Build(Of T)(T)
  spec.csharp:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
    name: Build<T>
    nameWithType: IExportable.Build<T>
    fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
    name: Build(Of T)
    nameWithType: IExportable.Build(Of T)
    fullName: Sin.Net.Domain.Persistence.IExportable.Build(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
  commentId: M:Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
  name: Build<T>(T)
  nameWithType: IExportable.Build<T>(T)
  fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>(T)
  nameWithType.vb: IExportable.Build(Of T)(T)
  fullName.vb: Sin.Net.Domain.Persistence.IExportable.Build(Of T)(T)
  name.vb: Build(Of T)(T)
  spec.csharp:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
    name: Build<T>
    nameWithType: IExportable.Build<T>
    fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0)
    name: Build(Of T)
    nameWithType: IExportable.Build(Of T)
    fullName: Sin.Net.Domain.Persistence.IExportable.Build(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sin.Net.Domain.Persistence.IExportable.Build``1({T},Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  commentId: M:Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  parent: Sin.Net.Domain.Persistence.IExportable
  definition: Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  name: Build<T>(T, IAdaptable)
  nameWithType: IExportable.Build<T>(T, IAdaptable)
  fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>(T, Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  nameWithType.vb: IExportable.Build(Of T)(T, IAdaptable)
  fullName.vb: Sin.Net.Domain.Persistence.IExportable.Build(Of T)(T, Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  name.vb: Build(Of T)(T, IAdaptable)
  spec.csharp:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
    name: Build<T>
    nameWithType: IExportable.Build<T>
    fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Persistence.Adapter.IAdaptable
    name: IAdaptable
    nameWithType: IAdaptable
    fullName: Sin.Net.Domain.Persistence.Adapter.IAdaptable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
    name: Build(Of T)
    nameWithType: IExportable.Build(Of T)
    fullName: Sin.Net.Domain.Persistence.IExportable.Build(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Persistence.Adapter.IAdaptable
    name: IAdaptable
    nameWithType: IAdaptable
    fullName: Sin.Net.Domain.Persistence.Adapter.IAdaptable
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.Persistence.Adapter.IAdaptable
  commentId: T:Sin.Net.Domain.Persistence.Adapter.IAdaptable
  parent: Sin.Net.Domain.Persistence.Adapter
  name: IAdaptable
  nameWithType: IAdaptable
  fullName: Sin.Net.Domain.Persistence.Adapter.IAdaptable
- uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  commentId: M:Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  name: Build<T>(T, IAdaptable)
  nameWithType: IExportable.Build<T>(T, IAdaptable)
  fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>(T, Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  nameWithType.vb: IExportable.Build(Of T)(T, IAdaptable)
  fullName.vb: Sin.Net.Domain.Persistence.IExportable.Build(Of T)(T, Sin.Net.Domain.Persistence.Adapter.IAdaptable)
  name.vb: Build(Of T)(T, IAdaptable)
  spec.csharp:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
    name: Build<T>
    nameWithType: IExportable.Build<T>
    fullName: Sin.Net.Domain.Persistence.IExportable.Build<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Persistence.Adapter.IAdaptable
    name: IAdaptable
    nameWithType: IAdaptable
    fullName: Sin.Net.Domain.Persistence.Adapter.IAdaptable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.Persistence.IExportable.Build``1(``0,Sin.Net.Domain.Persistence.Adapter.IAdaptable)
    name: Build(Of T)
    nameWithType: IExportable.Build(Of T)
    fullName: Sin.Net.Domain.Persistence.IExportable.Build(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sin.Net.Domain.Persistence.Adapter.IAdaptable
    name: IAdaptable
    nameWithType: IAdaptable
    fullName: Sin.Net.Domain.Persistence.Adapter.IAdaptable
  - name: )
    nameWithType: )
    fullName: )
- uid: Sin.Net.Domain.Persistence.Adapter
  commentId: N:Sin.Net.Domain.Persistence.Adapter
  name: Sin.Net.Domain.Persistence.Adapter
  nameWithType: Sin.Net.Domain.Persistence.Adapter
  fullName: Sin.Net.Domain.Persistence.Adapter
- uid: Sin.Net.Persistence.Exports.ExporterBase.Export*
  commentId: Overload:Sin.Net.Persistence.Exports.ExporterBase.Export
  name: Export
  nameWithType: ExporterBase.Export
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Export
- uid: Sin.Net.Domain.Persistence.IExportable.Export
  commentId: M:Sin.Net.Domain.Persistence.IExportable.Export
  parent: Sin.Net.Domain.Persistence.IExportable
  name: Export()
  nameWithType: IExportable.Export()
  fullName: Sin.Net.Domain.Persistence.IExportable.Export()
  spec.csharp:
  - uid: Sin.Net.Domain.Persistence.IExportable.Export
    name: Export
    nameWithType: IExportable.Export
    fullName: Sin.Net.Domain.Persistence.IExportable.Export
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sin.Net.Domain.Persistence.IExportable.Export
    name: Export
    nameWithType: IExportable.Export
    fullName: Sin.Net.Domain.Persistence.IExportable.Export
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sin.Net.Persistence.Exports.ExporterBase.HandleException*
  commentId: Overload:Sin.Net.Persistence.Exports.ExporterBase.HandleException
  name: HandleException
  nameWithType: ExporterBase.HandleException
  fullName: Sin.Net.Persistence.Exports.ExporterBase.HandleException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Sin.Net.Persistence.Exports.ExporterBase.Exception*
  commentId: Overload:Sin.Net.Persistence.Exports.ExporterBase.Exception
  name: Exception
  nameWithType: ExporterBase.Exception
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Exception
- uid: Sin.Net.Domain.Persistence.IExportable.Exception
  commentId: P:Sin.Net.Domain.Persistence.IExportable.Exception
  parent: Sin.Net.Domain.Persistence.IExportable
  name: Exception
  nameWithType: IExportable.Exception
  fullName: Sin.Net.Domain.Persistence.IExportable.Exception
- uid: Sin.Net.Domain.Exeptions.PersistenceException
  commentId: T:Sin.Net.Domain.Exeptions.PersistenceException
  parent: Sin.Net.Domain.Exeptions
  name: PersistenceException
  nameWithType: PersistenceException
  fullName: Sin.Net.Domain.Exeptions.PersistenceException
- uid: Sin.Net.Domain.Exeptions
  commentId: N:Sin.Net.Domain.Exeptions
  name: Sin.Net.Domain.Exeptions
  nameWithType: Sin.Net.Domain.Exeptions
  fullName: Sin.Net.Domain.Exeptions
- uid: Sin.Net.Persistence.Exports.ExporterBase.Type*
  commentId: Overload:Sin.Net.Persistence.Exports.ExporterBase.Type
  name: Type
  nameWithType: ExporterBase.Type
  fullName: Sin.Net.Persistence.Exports.ExporterBase.Type
- uid: Sin.Net.Domain.Persistence.IExportable.Type
  commentId: P:Sin.Net.Domain.Persistence.IExportable.Type
  parent: Sin.Net.Domain.Persistence.IExportable
  name: Type
  nameWithType: IExportable.Type
  fullName: Sin.Net.Domain.Persistence.IExportable.Type
